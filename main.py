import openai
import re
import os
import sqlite3

# Initialize the OpenAI API key and model ID
openai.api_key = os.environ.get("OPENAI_API_KEY")
model_id = "YOUR_MODEL_ID"

# Check if database exists, if not create new
if not os.path.exists('modules.db'):
    print("Creating new database...")
    conn = sqlite3.connect('modules.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE modules
                 (name text, description text, code text)''')
    conn.commit()
    conn.close()

# Define functions to add, read, and modify modules in the database or file system
def add_module(name, description, code):
    conn = sqlite3.connect('modules.db')
    c = conn.cursor()
    c.execute("INSERT INTO modules VALUES (?, ?, ?)", (name, description, code))
    conn.commit()
    conn.close()

def read_all_modules():
    conn = sqlite3.connect('modules.db')
    c = conn.cursor()
    c.execute("SELECT name, description, code FROM modules")
    modules = c.fetchall()
    conn.close()
    return {module[0]: {'description': module[1], 'code': module[2]} for module in modules}

def read_module_by_name(name):
    conn = sqlite3.connect('modules.db')
    c = conn.cursor()
    c.execute("SELECT name, description, code FROM modules WHERE name=?", (name,))
    module = c.fetchone()
    conn.close()
    return module

def modify_module_by_name(name, new_description, new_code):
    conn = sqlite3.connect('modules.db')
    c = conn.cursor()
    c.execute("UPDATE modules SET description=?, code=? WHERE name=?",
              (new_description, new_code, name))
    conn.commit()
    conn.close()

# Load existing modules into memory
modules_dict = read_all_modules()

# Define the iterative refinement function for generating text output
def generate_text(input_text, model_id):
    # Split the input text into manageable chunks
    input_chunks = re.findall(".{1,2048}", input_text)

    # Initialize the output text
    output_text = ""

    # Generate output text iteratively
    for chunk in input_chunks:
        prompt_text = output_text + chunk
        response = openai.Completion.create(
            engine=model_id,
            prompt=prompt_text,
            max_tokens=2048,
            n=1,
            stop=None,
            temperature=0.7,
        )
        output_text += response.choices[0].text

    # Return the output text
    return output_text


# Define the function for generating a module to perform the action requested by the user
def generate_action_module(input_text):
    # Define the prompt for generating a module to perform the requested action
    prompt = "Generate a function to perform the following action:\n" + input_text

    # Initialize the output code
    output_code = ""

    # Check if a suitable module exists in the database
    if input_text in modules_dict:
        output_code = modules_dict[input_text]['code']

    else:
        # Ask GPT-3 for information about the required module
        response = openai.Completion.create(
            engine=model_id,
            prompt=prompt,
            max_tokens=512,
            n=1,
            stop=None,
            temperature=0.5
        )

        # Get the module information generated by GPT-3
        module_info = response.choices[0].text.strip()

        # Append the module information to the output code
        output_code += module_info

        while True:
            # Generate code iteratively using the prompt and the current output code
            response = openai.Completion.create(
                engine=model_id,
                prompt=prompt + output_code,
                max_tokens=512,
                n=1,
                stop=None,
                temperature=0.5
            )

            # Get the new code generated by GPT-3
            new_code = response.choices[0].text.strip()

            # If the response is empty, break out of the loop
            if not new_code:
                break

            # Append the new code to the output code
            output_code += "\n" + new_code

            try:
                # Execute the generated code
                exec(output_code)

                # Call the function to perform the requested action
                output_text = perform_action()

                # Print the output text
                print(output_text)

                # Store the module in the database
                add_module(input_text, "Module to perform " + input_text, output_code)

                # Add module to memory
                modules_dict[input_text] = {'description': "Module to perform " + input_text, 'code': output_code}

                # Break out of the loop
                break

            except Exception as e:
                # Get the error message and relevant code lines
                error_msg = str(e)
                relevant_lines = ""

                for line in output_code.split("\n"):
                    if line in error_msg:
                        relevant_lines += line + "\n"

                # Generate code to fix the error using GPT-3
                response = openai.Completion.create(
                    engine=model_id,
                    prompt="Generate code to fix the following error:\n" + error_msg + "\nRelevant code:\n" +
                           relevant_lines,
                    max_tokens=512,
                    n=1,
                    stop=None,
                    temperature=0.5
                )

                # Get the code fix generated by GPT-3
                code_fix = response.choices[0].text.strip()

                # Apply the code fix
                output_code = output_code.replace(relevant_lines, code_fix)

    # Return the output code
    return output_code


# Prompt the user to select a setting
print("Select a setting:")
print("1: Generate text output")
print("2: Perform an action requested by the user")
selection = input()

# Prompt the user for input text
print("Enter input text:")
input_text = input()

# Call the appropriate function based on the user's selection
if selection == '1':
    output_text = generate_text(input_text, model_id)
    print(output_text)

elif selection == '2':
    # Check if a suitable module exists in the database
    module_code = read_module_by_name(input_text)

    if module_code:
        # Modify the existing module code
        print(f"Module found: {module_code[0]}")
        new_description = input("Enter new module description: ")
        new_code = generate_action_module(input_text)
        modify_module_by_name(input_text, new_description, new_code)
        modules_dict[input_text] = {'description': new_description, 'code': new_code}

    else:
        # Generate the code for a module to perform the requested action
        module_code = generate_action_module(input_text)

        if not module_code:
            print("Could not generate a module to perform the requested action.")

        else:
            name = input(f"Enter name for new module to perform '{input_text}': ")
            description = input(f"Enter description for new module to perform '{input_text}': ")
            add_module(name, description, module_code)
            modules_dict[name] = {'description': description, 'code': module_code}

else:
    print("Invalid selection")
